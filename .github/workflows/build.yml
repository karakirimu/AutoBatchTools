name: Build

on:
  push:
    branches: [ master ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      matrix:
        config:
        - { name: "Windows Latest x64", artifact: "Windows-x64.zip", os: windows-latest, host: windows, platform: win, environment_script: "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build/vcvars64.bat" }
        - { name: "Windows Latest x86", artifact: "Windows-x86.zip", os: windows-latest, host: windows, platform: win, environment_script: "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build/vcvars32.bat" }
        - { name: "Linux Latest x64",   artifact: "Linux-x64.zip",   os: ubuntu-latest, host: linux, platform: linux }
#         - { name: "macOS Latest x64",   artifact: "macOS-x64.zip",   os: macos-latest, host: mac, platform: mac }
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    steps:
    - uses: actions/checkout@v2
    
    - name: Install Qt
      uses: jurplel/install-qt-action@v2
      with:
        version: '6.1.2'
        host: ${{ matrix.config.host }}
        target: 'desktop'
#         arch: '' Windows w/ Qt >= 5.15: win64_msvc2019_64
        dir: '${{ github.workspace }}/Qt-${{ matrix.config.os }}/'
        install-deps: 'true'
#         modules: 'none'
        cached: 'true'
        setup-python: 'true'
        tools: 'tools_ifw,4.0,qt.tools.ifw.40 tools_qtcreator,4.14.2-0,qt.tools.qtcreator'
        set-env: 'true'
        tools-only: 'false'
        aqtversion: '==1.1.3'
        py7zrversion: '==0.14.0'
        extra: '--external 7z'
        
    - name: Install ninja-build tool
      # You may pin to the exact commit or the version.
      # uses: seanmiddleditch/gha-setup-ninja@16b940825621068d98711680b6c3ff92201f8fc0
      uses: seanmiddleditch/gha-setup-ninja@v3
      with:
        # Version of ninja-build to install
#         version: # default is 1.10.0
        # Override default platform with one of [win, mac, linux]
        platform: ${{ matrix.config.platform }}
        # Destination directory, will be added to PATH
#         destination: # optional, default is ninja-build
    
    - name: Configure CMake
      working-directory: ${{github.workspace}}
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      working-directory: ${{github.workspace}}
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
