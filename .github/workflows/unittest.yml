name: CMake

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  QT_VERSION: '6.1.2'

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    
    - name: Cache
      id: cache-qt
      uses: actions/cache@v2.1.6
      with:
        # A list of files, directories, and wildcard patterns to cache and restore
        path: |
          '${{ github.workspace }}/Qt/'
        # An explicit key for restoring and saving the cache
        key: ubuntu-${{env.QT_VERSION}}-Qt
    
    - name: Install Qt
      uses: jurplel/install-qt-action@v2
      with:
        version: ${{env.QT_VERSION}}
        host: 'linux'
        target: 'desktop'
#         arch: ''
        dir: '${{ github.workspace }}/Qt/'
        install-deps: 'true'
#         modules: 'none'
        cached: ${{ steps.cache-qt.outputs.cache-hit }}
        setup-python: 'true'
        tools: 'tools_ifw,4.0,qt.tools.ifw.40 tools_qtcreator,4.14.2-0,qt.tools.qtcreator'
        set-env: 'true'
        tools-only: 'false'
        aqtversion: '==1.1.3'
        py7zrversion: '==0.14.0'
        extra: '--external 7z'
        
    - name: Install ninja-build tool
      # You may pin to the exact commit or the version.
      # uses: seanmiddleditch/gha-setup-ninja@16b940825621068d98711680b6c3ff92201f8fc0
      uses: seanmiddleditch/gha-setup-ninja@v3
      with:
        # Version of ninja-build to install
#         version: # default is 1.10.0
        # Override default platform with one of [win, mac, linux]
        platform: 'linux'
        # Destination directory, will be added to PATH
#         destination: # optional, default is ninja-build
    
    - name: Configure CMake
      working-directory: ${{github.workspace}}/src/unittest
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      working-directory: ${{github.workspace}}/src/unittest
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Install Missing Library
      working-directory: ${{github.workspace}}/build
      run: sudo apt install libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0

#       Used when it cannot be executed
#     - name: Dependency Check
#       working-directory: ${{github.workspace}}/build
#       run: ldd /home/runner/work/AutoBatchTools/AutoBatchTools/Qt/Qt/6.1.2/gcc_64/plugins/platforms/libqxcb.so

#       Used when it cannot be executed.
#     - name: Missing Library Check (Ubuntu)
#       working-directory: ${{github.workspace}}/build
#       run: DISPLAY=localhost:0.0 QT_DEBUG_PLUGINS=1 ./unittest 2>&1
      
    - name: Run
      # You may pin to the exact commit or the version.
      # uses: GabrielBB/xvfb-action@5801c7b1a0f819d0e162f9d3cfc51c370d241e16
      uses: GabrielBB/xvfb-action@v1.5
      with:
        # Command to execute using xvfb
        run: ./unittest
        # Directory to execute command on, defaults to ./
        working-directory: ${{github.workspace}}/build
        # XServer options
#         options: # optional

#     - name: Run
#       working-directory: ${{github.workspace}}/build
#       run: ./unittest
      
